# Paths to relevant programs

CXX            = %{cxx} %{cxx_abi_flags}
LINKER         = %{linker}
AR             = %{ar_command}
PYTHON_EXE     = %{python_exe}

# Compiler Flags

LANG_FLAGS     = %{cc_lang_flags}
CXXFLAGS       = %{cc_compile_flags}
WARN_FLAGS     = %{cc_warning_flags}
SO_OBJ_FLAGS   = %{shared_flags}
LDFLAGS        = %{ldflags}

LIB_LINK_CMD   = %{lib_link_cmd}
EXE_LINK_CMD   = %{exe_link_cmd}

LIB_LINKS_TO   = %{link_to}
EXE_LINKS_TO   = %{link_to_botan} $(LIB_LINKS_TO)

LIB_FLAGS      = $(SO_OBJ_FLAGS) $(LANG_FLAGS) $(CXXFLAGS) $(WARN_FLAGS)
EXE_FLAGS      = $(LANG_FLAGS) $(CXXFLAGS) $(WARN_FLAGS)

SCRIPTS_DIR    = %{scripts_dir}
INSTALLED_LIB_DIR = %{prefix}/%{libdir}

POST_LINK_CMD  = %{post_link_cmd}

# The primary target
all: libs cli docs tests

# Executable targets
CLI           = %{cli_exe}
TEST          = %{test_exe}
LIBRARIES     = %{library_targets}

cli: $(CLI)
tests: $(TEST)
libs: $(LIBRARIES)
docs: %{doc_stamp_file}

# Misc targets

%{if make_supports_phony}
.PHONY = all cli libs tests docs clean distclean install
%{endif}

%{doc_stamp_file}: %{doc_dir}/manual/*.rst
	$(PYTHON_EXE) $(SCRIPTS_DIR)/build_docs.py --build-dir="%{build_dir}"

clean:
	$(PYTHON_EXE) $(SCRIPTS_DIR)/cleanup.py --build-dir="%{build_dir}"

distclean:
	$(PYTHON_EXE) $(SCRIPTS_DIR)/cleanup.py --build-dir="%{build_dir}" --distclean

install: libs cli docs
	$(PYTHON_EXE) $(SCRIPTS_DIR)/install.py --prefix=%{prefix} --build-dir="%{build_dir}" --bindir=%{bindir} --libdir=%{libdir} --docdir=%{docdir} --includedir=%{includedir}

# Object Files
LIBOBJS = %{join lib_objs}

CLIOBJS = %{join cli_objs}

TESTOBJS = %{join test_objs}

# Executable targets

$(CLI): $(LIBRARIES) $(CLIOBJS)
	$(EXE_LINK_CMD) $(LDFLAGS) $(CLIOBJS) $(EXE_LINKS_TO) %{output_to_exe}$@
	$(POST_LINK_CMD)

$(TEST): $(LIBRARIES) $(TESTOBJS)
	$(EXE_LINK_CMD) $(LDFLAGS) $(TESTOBJS) $(EXE_LINKS_TO) %{output_to_exe}$@
	$(POST_LINK_CMD)

%{if build_fuzzers}

FUZZERS = %{fuzzer_bin}

fuzzers: libs $(FUZZERS)

fuzzer_corpus:
	git clone --depth=1 https://github.com/randombit/crypto-corpus.git fuzzer_corpus

fuzzer_corpus_zip: fuzzer_corpus
	./src/scripts/create_corpus_zip.py fuzzer_corpus %{fuzzobj_dir}

%{endif}

# Library targets

%{if build_static_lib}

%{out_dir}/%{static_lib_name}: $(LIBOBJS)
	$(AR) %{ar_options} %{ar_output_to}$@ $(LIBOBJS)

%{endif}

%{if build_unix_shared_lib}

%{out_dir}/%{shared_lib_name}: $(LIBOBJS)
	$(LIB_LINK_CMD) $(LDFLAGS) $(LIBOBJS) $(LIB_LINKS_TO) %{output_to_exe}$@
	cd %{out_dir} && ln -fs %{shared_lib_name} %{soname_base}
	cd %{out_dir} && ln -fs %{shared_lib_name} %{soname_patch}

%{endif}

%{if build_msvc_shared_lib}

%{out_dir}/%{shared_lib_name}: $(LIBOBJS)
	$(LIB_LINK_CMD) $(LDFLAGS) $(LIBOBJS) $(LIB_LINKS_TO) %{output_to_exe}$@

%{endif}

# Build Commands

%{for lib_build_info}
%{obj}: %{src}
	$(CXX) %{isa_flags} $(%{target_type}_FLAGS) %{include_paths} %{dash_c} %{src} %{dash_o}$@
%{endfor}

%{for cli_build_info}
%{obj}: %{src}
	$(CXX) %{isa_flags} $(%{target_type}_FLAGS) %{include_paths} %{dash_c} %{src} %{dash_o}$@
%{endfor}

%{for test_build_info}
%{obj}: %{src}
	$(CXX) %{isa_flags} $(%{target_type}_FLAGS) %{include_paths} %{dash_c} %{src} %{dash_o}$@
%{endfor}

%{for fuzzer_build_info}
%{obj}: %{src}
	$(CXX) %{isa_flags} $(%{target_type}_FLAGS) %{include_paths} %{dash_c} %{src} %{dash_o}$@

%{exe}: %{obj} $(LIBRARIES)
	$(EXE_LINK_CMD) %{obj} $(EXE_LINKS_TO) %{fuzzer_lib} %{output_to_exe}$@
%{endfor}
