ninja_required_version = 1.3

CXX            = %{cxx}
LINKER         = %{linker}
PYTHON_EXE     = %{python_exe}

isa_flags =

rule compile_obj
  command = %{cxx} ${BUILD_FLAGS} ${isa_flags} %{include_paths} %{dash_c} $in %{dash_o}$out

ABI_FLAGS      = %{cc_sysroot} %{cxx_abi_flags}
LANG_FLAGS     = %{cc_lang_flags} %{os_feature_macros}
LANG_EXE_FLAGS = %{cc_lang_binary_linker_flags}
CXXFLAGS       = %{cc_compile_flags} -DBOTAN_IS_BEING_BUILT
WARN_FLAGS     = %{cc_warning_flags}
BUILD_FLAGS    = ${ABI_FLAGS} ${LANG_FLAGS} ${CXXFLAGS} ${WARN_FLAGS}

LIB_FLAGS      = %{lib_flags}
LDFLAGS        = %{ldflags}

EXE_LINK_CMD   = %{exe_link_cmd}

LIB_LINKS_TO        = %{external_link_cmd} %{link_to}
BUILD_DIR_LINK_PATH = %{build_dir_link_path}
EXE_LINKS_TO        = %{link_to_botan} ${LIB_LINKS_TO} %{extra_libs}


SCRIPTS_DIR    = %{scripts_dir}
INSTALLED_LIB_DIR = %{libdir}

CLI           = %{cli_exe}
TEST          = %{test_exe}
LIBRARIES     = %{library_targets}


# Library targets

%{if build_static_lib}

rule link_static
  command = %{ar_command} %{ar_options} %{ar_output_to}$out $in

build %{out_dir}/%{static_lib_name}: link_static %{join lib_objs}

%{endif}
%{if build_shared_lib}

rule link_shared
  command = %{lib_link_cmd} ${ABI_FLAGS} ${LDFLAGS} $in ${LIB_LINKS_TO} %{dash_o}$out

build %{out_dir}/%{shared_lib_name}: link_shared %{join lib_objs}
%{endif}
%{if symlink_shared_lib}

rule symlink
  command = cd %{out_dir} && ln -fs $in $out

build %{out_dir}/%{soname_base}: symlink %{out_dir}/%{shared_lib_name}
build %{out_dir}/%{soname_patch}: symlink %{out_dir}/%{shared_lib_name}

%{endif}

rule link_cli
  command = %{exe_link_cmd} %{cc_sysroot} %{cxx_abi_flags} $in %{build_dir_link_path} %{cc_lang_binary_linker_flags} %{ldflags} %{external_link_cmd} ${EXE_LINKS_TO} %{output_to_exe}$out

rule link_tests
  command = %{exe_link_cmd} %{cc_sysroot} %{cxx_abi_flags} $in %{build_dir_link_path} %{cc_lang_binary_linker_flags} %{ldflags} %{external_link_cmd} ${EXE_LINKS_TO} %{output_to_exe}$out


# Executable targets

# TODO don't always link statically
build %{cli_exe}: link_cli %{join cli_objs} | %{out_dir}/%{static_lib_name}

build %{test_exe}: link_tests %{join test_objs} | %{out_dir}/%{static_lib_name}


# Misc targets

rule build_docs
  command = "${PYTHON_EXE}" "${SCRIPTS_DIR}/build_docs.py" --build-dir="%{build_dir}"

build %{doc_stamp_file}: build_docs

rule install
  command = "${PYTHON_EXE}" "${SCRIPTS_DIR}/install.py" --build-dir="build"

build install: install


# Target aliases

build cli: phony %{cli_exe}

build tests: phony %{test_exe}

build libs: phony %{library_targets} $
%{if symlink_shared_lib}
  %{out_dir}/%{soname_base} %{out_dir}/%{soname_patch}
%{endif}

build docs: phony %{doc_stamp_file}

build all: phony libs docs cli tests


# Build Commands

%{for lib_build_info}
build %{obj}: compile_obj %{src}
  isa_flags = %{isa_flags}
%{endfor}

%{for cli_build_info}
build %{obj}: compile_obj %{src}
%{endfor}

%{for test_build_info}
build %{obj}: compile_obj %{src}
%{endfor}
